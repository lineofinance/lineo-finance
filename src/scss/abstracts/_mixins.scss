// Mixins - Reusable SCSS patterns
@use '../base/variables' as *;

// ==========================================================================
// Responsive Breakpoint Mixins
// ==========================================================================

@mixin mobile-up {
  @media (min-width: $breakpoint-mobile) {
    @content;
  }
}

@mixin tablet-up {
  @media (min-width: $breakpoint-tablet) {
    @content;
  }
}

@mixin desktop-up {
  @media (min-width: $breakpoint-desktop) {
    @content;
  }
}

@mixin wide-up {
  @media (min-width: $breakpoint-wide) {
    @content;
  }
}

// Max-width breakpoints for mobile-first approach
@mixin mobile-down {
  @media (max-width: #{$breakpoint-mobile - 1px}) {
    @content;
  }
}

@mixin tablet-down {
  @media (max-width: #{$breakpoint-tablet - 1px}) {
    @content;
  }
}

@mixin desktop-down {
  @media (max-width: #{$breakpoint-desktop - 1px}) {
    @content;
  }
}

// ==========================================================================
// Layout Mixins
// ==========================================================================

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin absolute-fill {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

// ==========================================================================
// Interactive Effects
// ==========================================================================

@mixin hover-lift($amount: -4px, $shadow: var(--shadow-lg)) {
  transition: transform var(--transition-base), box-shadow var(--transition-base);
  
  &:hover {
    transform: translateY($amount);
    box-shadow: $shadow;
  }
}

@mixin hover-scale($scale: 1.05) {
  transition: transform var(--transition-base);
  
  &:hover {
    transform: scale($scale);
  }
}

@mixin hover-opacity($opacity: 0.8) {
  transition: opacity var(--transition-fast);
  
  &:hover {
    opacity: $opacity;
  }
}

@mixin focus-ring($color: var(--color-primary), $offset: 2px) {
  &:focus {
    outline: none;
    box-shadow: 0 0 0 $offset rgba(255, 215, 0, 0.5);
  }
  
  &:focus-visible {
    outline: 2px solid $color;
    outline-offset: $offset;
  }
}

// ==========================================================================
// Card Patterns
// ==========================================================================

@mixin card-base($padding: var(--spacing-xl), $radius: var(--radius-lg)) {
  background: var(--color-background);
  border-radius: $radius;
  padding: $padding;
  box-shadow: var(--shadow-sm);
  transition: all var(--transition-base);
}

@mixin card-hover {
  &:hover {
    box-shadow: var(--shadow-lg);
    transform: translateY(-6px);
  }
}

@mixin card-with-border-accent($color: var(--color-primary), $position: top) {
  position: relative;
  overflow: hidden;
  
  &::before {
    content: '';
    position: absolute;
    background: linear-gradient(90deg, $color 0%, var(--color-primary-dark) 100%);
    
    @if $position == top {
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      transform: scaleX(0);
      transform-origin: left;
    } @else if $position == left {
      top: 0;
      left: 0;
      bottom: 0;
      width: 4px;
      transform: scaleY(0);
      transform-origin: top;
    }
    
    transition: transform var(--transition-base);
  }
  
  &:hover::before {
    transform: scale(1);
  }
}

// ==========================================================================
// Grid Systems
// ==========================================================================

@mixin responsive-grid($desktop: 3, $tablet: 2, $mobile: 1, $gap: var(--spacing-lg)) {
  display: grid;
  gap: $gap;
  grid-template-columns: repeat($desktop, 1fr);
  
  @include tablet-down {
    grid-template-columns: repeat($tablet, 1fr);
  }
  
  @include mobile-down {
    grid-template-columns: repeat($mobile, 1fr);
  }
}

@mixin auto-grid($min-width: 250px, $gap: var(--spacing-lg)) {
  display: grid;
  gap: $gap;
  grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
}

// ==========================================================================
// Typography
// ==========================================================================

@mixin heading-style($size: var(--font-size-h2), $weight: var(--font-weight-semibold)) {
  font-size: $size;
  font-weight: $weight;
  line-height: 1.2;
  margin-bottom: var(--spacing-md);
  color: var(--color-secondary);
}

@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin line-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// ==========================================================================
// Form Elements
// ==========================================================================

@mixin input-base {
  width: 100%;
  padding: var(--spacing-md);
  border: 1px solid var(--color-gray-medium);
  border-radius: var(--radius-md);
  font-family: var(--font-primary);
  font-size: 1rem;
  transition: border-color var(--transition-fast), box-shadow var(--transition-fast);
  
  &:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(255, 215, 0, 0.1);
  }
  
  &:disabled {
    background-color: var(--color-gray-light);
    cursor: not-allowed;
    opacity: 0.6;
  }
}

@mixin button-base {
  display: inline-block;
  padding: var(--spacing-md) var(--spacing-xl);
  border: none;
  border-radius: var(--radius-md);
  font-family: var(--font-primary);
  font-size: 1rem;
  font-weight: var(--font-weight-medium);
  text-align: center;
  text-decoration: none;
  cursor: pointer;
  transition: all var(--transition-base);
  
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
}

@mixin button-variant($bg: var(--color-primary), $color: var(--color-secondary), $hover-bg: var(--color-primary-dark)) {
  background-color: $bg;
  color: $color;
  
  &:hover:not(:disabled) {
    background-color: $hover-bg;
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
  }
  
  &:active:not(:disabled) {
    transform: translateY(0);
  }
}

// ==========================================================================
// Utility Mixins
// ==========================================================================

@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

@mixin reset-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

@mixin smooth-scroll {
  scroll-behavior: smooth;
  -webkit-overflow-scrolling: touch;
}

// ==========================================================================
// Animation Mixins
// ==========================================================================

@mixin fade-in($duration: var(--transition-base)) {
  animation: fadeIn $duration ease-in;
  
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
}

@mixin slide-up($distance: 20px, $duration: var(--transition-base)) {
  animation: slideUp $duration ease-out;
  
  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY($distance);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
}

// ==========================================================================
// Dark Mode Support (future-proofing)
// ==========================================================================

@mixin dark-mode {
  @media (prefers-color-scheme: dark) {
    @content;
  }
}

@mixin light-mode {
  @media (prefers-color-scheme: light) {
    @content;
  }
}